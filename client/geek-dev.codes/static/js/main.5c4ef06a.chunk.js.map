{"version":3,"sources":["lib/templates.js","App.js","reportWebVitals.js","index.js"],"names":["template","App","useState","code","setCode","mode","setMode","ext","SetExt","output","setOutput","input","SetInput","status","SetStatus","jobId","SetJobId","fetching","isFetching","loading","isLoading","useEffect","timer","setTimeout","clearTimeout","uuid","handleSubmit","a","payload","axios","post","data","job","jobOutput","intervalId","setInterval","get","params","id","jobid","dataRes","success","error","jobStatus","clearInterval","response","console","log","errMsg","err","stderr","window","alert","className","style","height","backgroundColor","display","justifyContent","width","alignItems","position","onChange","e","confirm","target","value","setmode","onClick","disabled","icon","faCircleNotch","class","top","bottom","right","left","theme","newValue","minLines","editorProps","$blockScrolling","showPrintMargin","highlightActiveLine","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","setOptions","maxWidth","readOnly","wrapEnabled","showGutter","showLineNumbers","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c4ef06a.chunk.js","sourcesContent":["const template = {};\n\ntemplate.cpp = `#include <iostream>\nusing namespace std;\n\nint main()\n{\n    cout << \"Hello World!\";\n    // Code here\n    return 0;\n}`;\n\ntemplate.py = `print('Hello, world!')`;\ntemplate.java = `class main {  \n  public static void main(String args[]){  \n   System.out.println(\"Hello Java\");  \n  }  \n}  `;\nexport default template;\n","import axios from \"axios\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCircleNotch } from \"@fortawesome/fontawesome-free-solid\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/snippets/c_cpp\";\nimport \"ace-builds/src-noconflict/snippets/python\";\nimport \"ace-builds/src-noconflict/ext-emmet\"\nimport \"brace/ext/language_tools\";\nimport template from \"./lib/templates\";\nimport \"ace-builds/src-noconflict/theme-dracula\";\nimport {v1 as uuid} from \"uuid\";\nconst App = () => {\n  const [code, setCode] = useState(\"\");\n  const [mode, setMode] = useState(\"c_cpp\");\n  const [ext, SetExt] = useState(\"cpp\");\n  const [output, setOutput] = useState(\"$ Output\");\n  const [input, SetInput] = useState(\"\");\n  const [status, SetStatus] = useState(\"\");\n  const [jobId, SetJobId] = useState(\"\");\n  const [fetching, isFetching] = useState(false);\n  const [loading, isLoading] = useState(true);\n\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      isLoading(false)\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    SetJobId(uuid());\n    setCode(template[ext]);\n  }, [ext]);\n  const handleSubmit = async () => {\n    isFetching(true)\n    const payload = {\n      jobId,\n      ext,\n      code,\n      input,\n    };\n    try {\n      // SetJobId(\"\");\n      \n      SetStatus(\"\");\n      setOutput(\"\");\n      const { data } = await axios.post(\n        \"http://localhost:8000/run\",\n        payload\n      );\n      // console.log(data);\n      if (data.job) setOutput(data.jobOutput);\n\n      let intervalId;\n\n      intervalId = setInterval(async () => {\n        const { data: dataRes } = await axios.get(\n          \"http://localhost:8000/status\",\n          { params: { id: data.jobid } }\n        );\n\n        const { success, job, error } = dataRes;\n        // console.log(dataRes);\n        if (success) {\n          const { status: jobStatus, output: jobOutput } = job;\n          SetStatus(jobStatus);\n          if (jobStatus === \"running\") return;\n          setOutput(jobOutput);\n          isFetching(false);\n          clearInterval();\n          clearInterval(intervalId);\n        } else {\n          // console.error(error);\n          setOutput(error);\n        }\n      }, 1000);\n    } catch ({ response }) {\n      if (response) {\n        console.log(response);\n        const errMsg = response.data.err.stderr;\n        setOutput(errMsg);\n      } else {\n        window.alert(\"Error Connection To server\");\n      }\n    }\n  };\n\n  const onChange = (newValue) => {\n    // console.log(\"change\", newValue);\n    setCode(newValue);\n  };\n\n  const setmode = (ext) => {\n    if (ext === \"py\") {\n      setMode(\"python\");\n    }\n    if (ext === \"cpp\") {\n      setMode(\"c_cpp\");\n    }\n    if (ext === \"java\"){\n      setMode(\"java\")\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <header\n          style={{\n            height: \"50px\",\n            backgroundColor: \"#1D1E22\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            alignItems: \"center\",\n            position: \"static\",\n          }}\n        >\n          <div className=\"select\">\n            <select\n              onChange={(e) => {\n                let response = window.confirm(\n                  \"Warning Switching The Language will remove your chnages\"\n                );\n                if (response){ SetExt(e.target.value);\n                setmode(e.target.value);}\n              }}\n              value={ext}\n            >\n              <option value=\"cpp\">C++</option>\n              <option value=\"py\">Python</option>\n              <option value=\"java\">Java</option>\n            </select>\n          </div>\n          <div>\n            <button onClick={handleSubmit} disabled = {fetching}>\n              \n              {fetching ? (\n                <FontAwesomeIcon className=\"fa-spin\" icon={faCircleNotch} />\n              ) : (\n                \"Submit\"\n              )}\n            </button>\n          </div>\n        </header>\n       </div>\n\n      {loading? (<div className=\"logo\">\n        <span className=\"left\">&#123;</span>\n        <span class=\"right\">&#125;</span>\n        <span class=\"text\">\n          IDE\n          <br />\n          <strong>GEEK</strong>\n        </span>\n      </div>): ( <div\n          style={{\n            display: \"flex\",\n            position: \"absolute\",\n            top: \"50px\",\n            bottom: \"0\",\n            right: \"0\",\n            left: \"0\",\n          }}\n        >\n          <AceEditor\n            className=\"editor\"\n            mode={mode}\n            theme=\"dracula\"\n            height=\"100%\"\n            onChange={onChange}\n            value={code}\n            minLines=\"50\"\n            style={{ width: \"100%\" }}\n            editorProps={{ $blockScrolling: true }}\n            showPrintMargin={false}\n            highlightActiveLine={true}\n            enableBasicAutocompletion = {true}\n            enableLiveAutocompletion={true} \n            enableSnippets={true}\n            setOptions={{\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n            }}\n          />\n\n          {/* <textarea\n          rows=\"20\"\n          cols=\"75\"\n          value={code}\n          onChange={(e) => {\n            setCode(e.target.value);\n    \n          }}\n        > */}\n          {/* </textarea> */}\n\n          <div style={{\n            maxWidth:\"50vw\"\n          }}>\n            <AceEditor\n              theme=\"dracula\"\n              value={output + \"\\n\" + status}\n              readOnly={true}\n              style={{ height: \"50%\" }}\n              wrapEnabled={false}\n              setOptions={{\n                showGutter: false,\n                highlightActiveLine: false,\n                showLineNumbers: false,\n                showPrintMargin: false,\n              }}\n            />\n            <AceEditor\n              theme=\"dracula\"\n              placeholder=\"STDIN\"\n              value={input}\n              style={{ height: \"50%\" }}\n              setOptions={{\n                showGutter: false,\n                highlightActiveLine: false,\n                showLineNumbers: false,\n                showPrintMargin: false,\n              }}\n              onChange={(e) => {\n                SetInput(e);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}